using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Management.Automation;
using System.Management.Automation.Runspaces;

/**
 * PSExecutor executes given powershell command
 * USAGE: PSEexecutor PSScriptString [debug]
 * 
 * Example: PSEexecutor "$PSVersionTable.PSVersion" debug
 * 
 * Source: http://www.codeproject.com/Articles/18229/How-to-run-PowerShell-scripts-from-C
 * Source: http://blogs.msdn.com/b/kebab/archive/2014/04/28/executing-powershell-scripts-from-c.aspx
 */
namespace PSExecutor
{
    class PSExecutor
    {
        private static bool _debug = false;

        public static void Main(string[] args)
        {
            string scripttext = "";

            if (1 == args.Length || 2 == args.Length)
            {
                if (args[0].Length > 0)
                {
                    scripttext = args[0];
                }
            }

            if (2 == args.Length) 
            {
                if ("debug" == args[1])
                {
                    Console.WriteLine("DEBUG MODE");
                    _debug = true;
                }
            }

            start(scripttext, _debug);
        }

        private static void start( string scripttext, bool debug )
        {
            if (debug)
            {
                Console.WriteLine("Scripttext: " + scripttext);
                Console.WriteLine("Debug: " + debug.ToString());
                Console.WriteLine("-----------------------------");
                Console.WriteLine(PSExecute(scripttext));
            }
            else
            {
                PSExecute(scripttext);
            }
        }

        private static string PSExecute( string scripttext ) 
        {
            String result = "";

            Runspace runSpace = null;

            try
            {
                runSpace = RunspaceFactory.CreateRunspace();
                runSpace.Open();

                Pipeline pipeline = runSpace.CreatePipeline();
                pipeline.Commands.AddScript(scripttext);

                Collection<PSObject> results = pipeline.Invoke();

                runSpace.Close();

                StringBuilder stringBuilder = new StringBuilder();
                foreach (PSObject obj in results)
                {
                    stringBuilder.AppendLine(obj.ToString());
                }

                result = stringBuilder.ToString();
            } catch(Exception ex) {
                if (null != runSpace)
                {
                    if (_debug)
                    {
                        Console.WriteLine("Error: Exception" + ex.GetType().ToString() );
                    }
                    runSpace.Close();
                }
            }

            return result;
        }
    }
}
